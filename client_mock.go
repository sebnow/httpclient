// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

package httpclient

import (
	io "io"
	http "net/http"
	url "net/url"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockClient) EXPECT() *MockClientMockRecorder {
	return _m.recorder
}

// Do mocks base method
func (_m *MockClient) Do(req *http.Request) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (_mr *MockClientMockRecorder) Do(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Do", arg0)
}

// Get mocks base method
func (_m *MockClient) Get(url string) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Get", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockClientMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

// Head mocks base method
func (_m *MockClient) Head(url string) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Head", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head
func (_mr *MockClientMockRecorder) Head(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Head", arg0)
}

// Post mocks base method
func (_m *MockClient) Post(url string, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Post", url, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (_mr *MockClientMockRecorder) Post(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Post", arg0, arg1, arg2)
}

// PostForm mocks base method
func (_m *MockClient) PostForm(url string, data url.Values) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "PostForm", url, data)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostForm indicates an expected call of PostForm
func (_mr *MockClientMockRecorder) PostForm(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PostForm", arg0, arg1)
}
